<?xml version="1.0" encoding="utf-8"?>
<KFunction xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Name>fillLuChildTables</Name>
  <ID>JAVA.fillLuChildTables</ID>
  <Category>JAVA</Category>
  <FunctionLevel>Project</FunctionLevel>
  <FunctionType>WebService</FunctionType>
  <RegisterAsLuDbFunction>false</RegisterAsLuDbFunction>
  <SaveToDLUR>false</SaveToDLUR>
  <ApiFunction>false</ApiFunction>
  <DecisionFunction>false</DecisionFunction>
  <RequiresLuReference>false</RequiresLuReference>
  <Desc />
  <Auther name="" id="" />
  <Language>Java</Language>
  <FunctionBody>		StringBuilder sqlQuery = new StringBuilder("select * from " + tableName);
		if(parentInstanceId != null) {

			String whereClause = " where " + parentTableName + "_ID = " + String.valueOf(parentInstanceId); //New!
			sqlQuery.append(whereClause);
		}

		Set&lt;String&gt; defensiveParentTableName = new HashSet&lt;&gt;(parentTableNames);
		defensiveParentTableName.add(tableName);

		ResultSetWrapper resultsWrapper = DBQuery("fabric", sqlQuery.toString(), null);
		
		List&lt;Object[]&gt; results = new ArrayList&lt;&gt;();
		resultsWrapper.forEach(result -&gt; results.add(result));
		
		List&lt;String&gt; columnNames = resultsWrapper.getColumnsNames();

		IoGroup ioGroup = null;

		if(iogInstance == null){ 
			ioGroup = new IoGroup(parentTableName);
		}
		else {
			// The FT names were not Upper Camel in DES! They were all Upper only!
			//String tableNameUpperCamel = CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, tableName.replace("DECISION_", ""));
			String tableNameUpperCamel = tableName.replace("DECISION_", "").replaceAll("_","");
			ioGroup = new IoGroup(tableNameUpperCamel);
			iogInstance.setIoGroups(new ArrayList&lt;&gt;()); 
			iogInstance.getIoGroups().add(ioGroup);
		}
		ioGroup.setIoGroupInstances(new ArrayList&lt;&gt;());
		
		for (Object[] result : results) {
			
			IoGroupInstance specificInstance = new IoGroupInstance();
			ioGroup.getIoGroupInstances().add(specificInstance);
			specificInstance.setIoFactTypes(new ArrayList&lt;&gt;());
			Set&lt;KeyValue&gt; executionKeyValues = Sets.newHashSet();
			for (int i = 0; i &lt; columnNames.size(); i++) {

				String columnName = columnNames.get(i);
				Object columnValue = result[i];
				
				if(columnName.equalsIgnoreCase(tableName + "_ID")){ // New!
					
					KeyValue instanceNameAndId = new KeyValue();
					instanceNameAndId.setKey(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, columnName));
					instanceNameAndId.setValue(String.valueOf(columnValue));
					executionKeyValues.add(instanceNameAndId);
					
					if (table.childObjects != null) {
						for (LudbObject tableChild : table.childObjects) {
							if (tableChild.ludbObjectName.startsWith("DECISION_")) {

								fillLuChildTables(tableChild.ludbObjectName,
										specificInstance, tableChild,
										tableName, defensiveParentTableName, String.valueOf(columnValue));
							}
						}
					}
				}  else {
						List&lt;String&gt; parentTablesAsColumn = parentTableNames.stream()
							.map(parentTableStr -&gt; (parentTableStr + "_ID").toLowerCase())
							.collect(Collectors.toList());
			
						String msg = "Current table: " + tableName + "\ncurrent column: " + columnName;
						reportUserMessage(msg + "====================&gt;" + String.join(", ", parentTablesAsColumn));
						if (parentTablesAsColumn.contains(columnName.toLowerCase())){ 
							KeyValue instanceNameAndId = new KeyValue();
							instanceNameAndId.setKey(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, columnName));
							instanceNameAndId.setValue(String.valueOf(columnValue));
							executionKeyValues.add(instanceNameAndId);
						} else {
		
							IoFactType factType = new IoFactType();
							factType.setName(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, columnName));
							setFactTypeValue(factType, columnValue);
							specificInstance.getIoFactTypes().add(factType);
						}
				  }
			}
			specificInstance.setExecutionKeyValues(executionKeyValues);
		}
		
		return ioGroup;
</FunctionBody>
  <IsSyntaxValid>true</IsSyntaxValid>
  <IsRootFunction>false</IsRootFunction>
  <InputParams>
    <Input name="tableName" id="fi.JAVA.fillLuChildTables.0" index="0" dataType="String">
      <Comment />
    </Input>
    <Input name="iogInstance" id="fi.JAVA.fillLuChildTables.1" index="1" dataType="com.sapiens.des.engine.model.IoGroupInstance">
      <Comment />
    </Input>
    <Input name="table" id="fi.JAVA.fillLuChildTables.2" index="2" dataType="com.k2view.cdbms.lut.LudbObject">
      <Comment />
    </Input>
    <Input name="parentTableName" id="fi.JAVA.fillLuChildTables.3" index="3" dataType="String">
      <Comment />
    </Input>
    <Input name="parentTableNames" id="fi.JAVA.fillLuChildTables.4" index="4" dataType="Set&lt;String&gt;">
      <Comment />
    </Input>
    <Input name="parentInstanceId" id="fi.JAVA.fillLuChildTables.5" index="5" dataType="String">
      <Comment />
    </Input>
  </InputParams>
  <OutputParams>
    <Output name="val" id="fo.JAVA.fillLuChildTables.0" index="0" dataType="IoGroup">
      <Comment />
    </Output>
  </OutputParams>
</KFunction>